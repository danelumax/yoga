#堆排序
堆排序实际上是用大根堆的方式，将一棵树，分为若干个单元，每个单元由两个（一个）叶子和一个root组成。
大根堆就是指单元中的root相较于单元中的叶子，是最大的。在树中，某个单元的root，可能也是其他单元的叶子。

若一棵树有n个节点，那么前n/2个都不是叶子，或者说是某一单元的root。
把每个root依次挑出，在这个root的单元里，从root和叶子中，挑出最大的，作为root。
在挑的过程中，*先判断左子树是否存在*，如果存在，说明这个root是真root，而不是叶子。
随后判断这个单元右子树是否存在，左子树是2*root，那么右子树是2*root+1，如果右子树存在，将左右子树分别比较，找出最大的数，跟root比较。
如果root小于较大的叶子，那么就把大叶子作为root。
注意：原本的叶子可能是某一单元的root，在与本单元的root互换后，那么原单元相当于换了一个root。而这个新root可能小于新单元的叶子。
所以在对需要将本单元排序后，应对因此被破坏的单元进行重新排序。那么新单元root的位置是本单元新root的原始位置。
如果在root与叶子比较过程中，没有出现互换的情况，那么说明这次挑出的root是大根，并且没有破坏到其他的单元，所以此次排序完成。继续下一个单元root的迭代。
当所有单元root全部迭代后，能够保证，整棵树中，树的root是最大的。并且保证，每一层root，都是比下一层的root或叶子大。
迭代的目的：一次调整只是深度遍历，而不是广度，因此需要迭代，才能面面俱到。
构建数完成！
那么我们就将树的root，即a[0],放到数组最后一个中.也就是放到第n个位置。而原本的a[n],放到了root的位置，即原本的大根数被破坏了，
所以我们需要从0开始，将被破坏的那一脉，重新构建。不是广度调整，而是深度调整。
然后我们从0 - n-1之间（去除了已经排好的旧root），重新按照上述繁琐的方式，构建一次大根树。再找出树的root，放到数组的倒数第二个。
那么每次构建一次树，都能找出一个最大的数，而树的规模比前一次构建完成，总数都少1.直至只有root，没有叶子。
