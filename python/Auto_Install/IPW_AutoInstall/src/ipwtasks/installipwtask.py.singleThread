import log, common
from cfg import cfgInstance
from sshmanager import sshManagerInstance
from sshutil import SshUtil


class InstallIpwTask(object) :
    """
    Install IPWorks RPMs
    """

    def __init__(self) :
        self._file = "src/ipwtasks/rpm_install.json"
        self._is_install_ndb = False
        self._is_install_ss7 = False

    def precheck(self) :
        pass

    def execute(self) :
        log._file.debug(">> Install IPWorks Begin")	
        if common.g_isInstall_AAA or common.g_isInstall_ENUM :
            self._is_install_ndb = True
            self._is_install_ss7 = True
        # single:
        if not cmp(common.C_IPW_MODE_SINGLE, common.g_ipw_mode) :
            self._install_Single()
        # medium1:
        if not cmp(common.C_IPW_MODE_MEDIUM1, common.g_ipw_mode) :
            self._install_Medium1()
        # medium2:
        if not cmp(common.C_IPW_MODE_MEDIUM2, common.g_ipw_mode) :
            self._install_Medium2()
        # entry1:
        if not cmp(common.C_IPW_MODE_ENTRY1, common.g_ipw_mode) :
            self._install_Entry1()
        # entry2:
        if not cmp(common.C_IPW_MODE_ENTRY2, common.g_ipw_mode) :
            self._install_Entry2()
        log._file.debug("<< Install IPWorks End")


    def verify(self) :
        pass

    def updateProgress(self) :
        pass



    def _install_Single(self) :
        log._file.debug(">>> Install Single Mode Begin");
        json_root = common.parse_file(self._file)
        ps1 = cfgInstance().getPsCfg(0)
        if self._is_install_ss7 :
            self._installSS7(ps1)
        self._install_moudle(ps1, json_root, "Element_Manager")
        self._install_moudle(ps1, json_root, "SLM")
        self._install_moudle(ps1, json_root, "SM")
        if self._is_install_ndb :
            self._install_moudle(ps1, json_root, "NDB_Single")
        if common.g_isInstall_AAA :
            self._install_moudle(ps1, json_root, "AAA_Single")
        if common.g_isInstall_DNS :
            self._install_moudle(ps1, json_root, "DNS_Single")
        if common.g_isInstall_ENUM :
            self._install_moudle(ps1, json_root, "ENUM_Single")
        if common.g_isInstall_DHCP :
            self._install_moudle(ps1, json_root, "DHCP_Single")
        self._remote_setup_env(ps1)
        log._file.debug("<<< Install Single Mode End");



    def _install_Entry1(self) :
        log._file.debug(">>> Install Entry1 Mode Begin");
        json_root = common.parse_file(self._file)
        ss1 = cfgInstance().getSsCfg(0)
        ps1 = cfgInstance().getPsCfg(0)
        ps2 = cfgInstance().getPsCfg(1)
        if self._is_install_ss7 :
            self._installSS7(ps1)
            self._installSS7(ps2)
        self._install_moudle(ss1, json_root, "Element_Manager")
        ###self._install_moudle(ss1, json_root, "test")
        self._install_moudle(ss1, json_root, "SLM")
        self._install_moudle(ps1, json_root, "Entry_Common")
        self._install_moudle(ps1, json_root, "SLM")
        self._install_moudle(ps1, json_root, "SM")
        self._install_moudle(ps2, json_root, "Entry_Common")
        self._install_moudle(ps2, json_root, "SM")
        if common.g_isInstall_AAA :
            self._install_moudle(ss1, json_root, "NDB_NonSingle")
            self._install_moudle(ps1, json_root, "AAA_NonSingle")
            self._install_moudle(ps2, json_root, "AAA_NonSingle")
        elif common.g_isInstall_ENUM :
            self._install_moudle(ps1, json_root, "NDB_Single")
            self._install_moudle(ps1, json_root, "ENUM_Single")
            self._install_moudle(ps2, json_root, "NDB_Single")
            self._install_moudle(ps2, json_root, "ENUM_Single")
        if common.g_isInstall_DNS :
            self._install_moudle(ps1, json_root, "DNS_Single")
            self._install_moudle(ps2, json_root, "DNS_Single")
        if common.g_isInstall_DHCP :
            self._install_moudle(ps1, json_root, "DHCP_Single")
            self._install_moudle(ps2, json_root, "DHCP_Single")
        self._remote_setup_env(ss1)
        self._remote_setup_env(ps1)
        self._remote_setup_env(ps2)
        log._file.debug("<<< Install Entry1 Mode End");



    def _install_Entry2(self) :
        log._file.debug(">>> Install Entry2 Mode Begin");
        json_root = common.parse_file(self._file)
        ss1 = cfgInstance().getSsCfg(0)
        ps1 = cfgInstance().getPsCfg(0)
        if self._is_install_ss7 :
            self._installSS7(ss1)
            self._installSS7(ps1)
        self._install_moudle(ss1, json_root, "Element_Manager")
        self._install_moudle(ss1, json_root, "SLM")
        self._install_moudle(ss1, json_root, "SM")
        self._install_moudle(ps1, json_root, "Entry_Common")
        self._install_moudle(ps1, json_root, "SLM")
        self._install_moudle(ps1, json_root, "SM")
        if common.g_isInstall_DNS :
            self._install_moudle(ss1, json_root, "DNS_Single")
            self._install_moudle(ps1, json_root, "DNS_Single")
        if common.g_isInstall_ENUM :
            self._install_moudle(ss1, json_root, "NDB_Single")
            self._install_moudle(ss1, json_root, "ENUM_Single")
            self._install_moudle(ps1, json_root, "NDB_Single")
            self._install_moudle(ps1, json_root, "ENUM_Single")
        if common.g_isInstall_DHCP :
            self._install_moudle(ss1, json_root, "DHCP_Single")
            self._install_moudle(ps1, json_root, "DHCP_Single")
        self._remote_setup_env(ss1)
        self._remote_setup_env(ps1)
        log._file.debug("<<< Install Entry2 Mode End");



    def _install_Medium1(self) :
        log._file.debug(">>> Install Medium1 Mode Begin");
        json_root = common.parse_file(self._file)
        ss1 = cfgInstance().getSsCfg(0)
        ss2 = cfgInstance().getSsCfg(1)
        ps1 = cfgInstance().getPsCfg(0)
        ps2 = cfgInstance().getPsCfg(1)
        if self._is_install_ss7 :
            self._installSS7(ps1)
            self._installSS7(ps2)
        self._install_moudle(ss1, json_root, "Element_Manager")
        self._install_moudle(ss1, json_root, "Element_Manager_HA")
        self._install_moudle(ss1, json_root, "SLM")
        self._install_moudle(ss2, json_root, "Element_Manager")
        self._install_moudle(ss2, json_root, "Element_Manager_HA")
        self._install_moudle(ss2, json_root, "SLM")
        self._install_moudle(ps1, json_root, "Entry_Common")
        self._install_moudle(ps1, json_root, "SM")
        self._install_moudle(ps2, json_root, "Entry_Common")
        self._install_moudle(ps2, json_root, "SM")
        if common.g_isInstall_AAA :
            self._install_moudle(ss1, json_root, "NDB_NonSingle")
            self._install_moudle(ss2, json_root, "NDB_NonSingle")
            self._install_moudle(ps1, json_root, "AAA_NonSingle")
            self._install_moudle(ps2, json_root, "AAA_NonSingle")
        elif common.g_isInstall_ENUM :
            self._install_moudle(ps1, json_root, "NDB_Single")
            self._install_moudle(ps1, json_root, "ENUM_Single")
            self._install_moudle(ps2, json_root, "NDB_Single")
            self._install_moudle(ps2, json_root, "ENUM_Single")
        if common.g_isInstall_DNS :
            self._install_moudle(ps1, json_root, "DNS_Single")
            self._install_moudle(ps2, json_root, "DNS_Single")
        if common.g_isInstall_DHCP :
            self._install_moudle(ps1, json_root, "DHCP_Single")
            self._install_moudle(ps2, json_root, "DHCP_Single")
        self._remote_setup_env(ss1)
        self._remote_setup_env(ss2)
        self._remote_setup_env(ps1)
        self._remote_setup_env(ps2)
        log._file.debug("<<< Install Medium1 Mode End");



    def _install_Medium2(self) :
        log._file.debug(">>> Install Medium2 Mode Begin");
        log._file.debug("<<< Install Medium2 Mode End");

	

    def _install_moudle(self, node, root, moudle) :
        for item in root[moudle] :
            if item["isShell"] == "True" :
                isShell = True
            else :
                isShell = False
            self._remote_install_package(node, item["moudle"], is_shell=isShell, sub_module=item["subModule"])



    def _remote_install_package(self, cfg, package_name, is_shell, sub_module=None):
        log._file.debug(">>> Install %s %s on %s" %(package_name, sub_module, cfg.getHostName()))
        ssh = sshManagerInstance().getSsh(cfg.getHostName())
        ssh_util = SshUtil(ssh)
        ssh_util.remote_exec("cd " + cfgInstance().getInstallPath())
        command = "python installpackage.py --mount_point=" + cfgInstance().getMountPoint() + " --name=" + package_name 
        if is_shell :
            command += " --shell"
        if sub_module :
            command += " --sub_module=" + sub_module
        if not cmp('ss', package_name) or not cmp('sm', package_name):
            # need to wait other 3 seconds to receive the return infomation
            ssh_util.remote_exec(command, wait=3)
        else :
            ssh_util.remote_exec(command) 
        log._file.debug("<<<")



    def _remote_setup_env(self, cfg) :
        log._file.debug(">>> Setup Env on %s" %(cfg.getHostName()))
        ssh = sshManagerInstance().getSsh(cfg.getHostName())
        ssh_util = SshUtil(ssh)
        ssh_util.remote_exec("cd " + cfgInstance().getInstallPath())
        command = "python setenv.py --command=write_bashrc"
        ssh_util.remote_exec(command) 
        ssh_util.remote_exec("umount " + cfgInstance().getMountPoint())
        log._file.debug("<<<")



    def _installSS7(self, cfg) :
        log._file.debug(">>> Install SS7 on " + cfg.getHostName())
        ssh = sshManagerInstance().getSsh(cfg.getHostName())
        ssh_util = SshUtil(ssh)
        ssh_util.remote_exec("cd " + cfgInstance().getMountPoint() + "/x86-linux/ss7")
        ssh_util.remote_exec("./uninstall")
        ssh_util.remote_exec("./install")
        log._file.debug("<<< Install SS7 End")


